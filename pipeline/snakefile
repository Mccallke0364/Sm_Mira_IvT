# config_file: "config.yaml"
file = [a[:-9] for a in os.listdir("/data/classes/2024/fall/biol343/course_files/20240923_LH00283_0144_B22NMVKLT3/") if a.endswith("fastq.gz")]
print(file)

rule all:
    input:
    #    "genome/genome.fa.fai", 
        "star_stats.txt",
        "multiqc_report_all_files.html",
        "plots/"

rule fetch_ref_genome:
    output:
        "genome/genome.fa.gz"
    shell:
        "wget -O {output} https://ftp.ebi.ac.uk/pub/databases/wormbase/parasite/releases/WBPS19/species/schistosoma_mansoni/PRJEA36577/schistosoma_mansoni.PRJEA36577.WBPS19.genomic.fa.gz"

rule gzip_genome:
    input:
        "genome/genome.fa.gz"
    output:
        "genome/genome.fa"
    shell:
        "gzip -d -f {input}"

rule fetch_ref_annotations:
    output:
        "genome/annotations.gtf"
    shell:
        "wget -O - https://ftp.ebi.ac.uk/pub/databases/wormbase/parasite/releases/WBPS19/species/schistosoma_mansoni/PRJEA36577/schistosoma_mansoni.PRJEA36577.WBPS19.canonical_geneset.gtf.gz | gzip -f -d > {output}"

rule create_fai:
    input:
        "genome/genome.fa"
    output:
        "genome/genome.fa.fai"
    shell:
        "samtools faidx {input}"

rule cutadapt:
    input:
        i_1="/data/classes/2024/fall/biol343/course_files/20240923_LH00283_0144_B22NMVKLT3/{sample}_R1_001.fastq.gz",
        i_2="/data/classes/2024/fall/biol343/course_files/20240923_LH00283_0144_B22NMVKLT3/{sample}_R2_001.fastq.gz"

    output:
        o_1="trimmed/{sample}_R1_001_trimmed.fastq.gz",
        o_2="trimmed/{sample}_R2_001_trimmed.fastq.gz"

    shell:
        "cutadapt -j 32 -m 20 --nextseq-trim=10 -u 10 -U 10 -a AGATCGGAAGAGCACACGTCTGAACTCCAGTCA -A AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT -o {output.o_1} -p {output.o_2} {input.i_1} {input.i_2}"


rule qc:
    input:
        a="/data/classes/2024/fall/biol343/course_files/20240923_LH00283_0144_B22NMVKLT3/{sample}.fastq.gz"
    output:
        multiext("qc_snake/{sample}_fastqc", ".html", ".zip")
    params:
        out="qc_snake/"
    shell:
        "fastqc -t 16 {input.a} -o {params.out}"

rule qc_2:
    input:
        a="trimmed/{sample}.fastq.gz"
    output:
        multiext("qc_snake/{sample}_fastqc", ".html", ".zip")
    params:
        qc_2_out = "qc_snake/"
    shell:
        "fastqc -t 16 {input.a} -o {params.qc_2_out}"
rule multiqc:
    input:
        i=expand("qc_snake/{sample}_trimmed_fastqc.html", sample=file),
        i_2=expand("qc_snake/{sample}_fastqc.html", sample=file)
    output:
        a="multiqc_report_all_files.html"
    params:
        dira="qc_snake/"
    shell:
        "multiqc -f -d {params.dira} -n {output.a}"

rule star_sa:
    input:
        fa = "genome/genome.fa",
        ant = "genome/annotations.gtf"
    output:
        genomeDir=directory("genome/star/")
    params:
        overhang=150,
        bpc=13,
        runMode="genomeGenerate"
    threads:
        16
    run:
        """
        STAR \
            --runThreadN {threads} \
            --runMode {params.runMode} \
            --genomeDir {output.genomeDir} \
            --genomeFastaFiles  {input.fa}\
            --sjdbGTFfile {input.ant} \
            --sjdbOverhang {params.overhang}\
            --genomeSAindexNbases {params.bpc}
        """
rule alignment:
    input:
        gene_dir="genome/star/"
    output:
        manifest_file = "manifest.tsv",
        out_align = "alignment_sub/star/",
        log_file_1 = "alignment_sub/star/firstlog.final.out",
        log_file_2 = "alignment_sub/star/second.final.out",
        sjout = "alignment_sub/star/SJ.out.tab",
        out="alignment_sub/star/Aligned.sortedByCoord.out.bam"
    params:
        runMode_align="alignReads"
    threads:
        16
    run:
        """STAR \
           --runThreadN {threads} \
           --runMode {params.runMode_align}\
           --genomeDir {input.gene_dir}\
           --readFilesManifest {manifest_file}\
           --readFilesCommand zcat \
           --outSAMtype BAM SortedByCoordinate \
           --outSAMunmapped Within \
           --outFileNamePrefix {output.out_align},""",
        """
           cp alignment_sub/star/Log.final.out {output.log_file_1}
        """,
        """ 
        STAR \
        --runThreadN {threads) \
        --runMode {params.runMode_align} \
        --genomeDir {input.gene_dir} \
        --readFilesManifest {manifest_file} \
        --readFilesCommand zcat \
        --outSAMtype BAM SortedByCoordinate \
        --outSAMunmapped Within \
        --outSAMattributes NH HI AS nM RG \
        --outFileNamePrefix {output.out_align} \
        --sjdbFileChrStartEnd {output.sjout}""",
        """
        cp alignment_sub/star/Log.final.out {output.log_file_2}
        """


rule samtools:
    input:
        align_star="alignment_sub/star",
        file_bam= "alignment_sub/star/Aligned.sortedByCoord.out.bam"
    output:
        a="star_stats.txt"
    threads:
        16 
    run:
        shell("samtools flagstat {input.align_star} > {output.a}")

rule qualimap:
    input:
        bamqc_rnaseq="alignment_sub/star/Aligned.sortedByCoord.out.bam",
        g_ant="genome/annotations.gtf"
    output:
        out_bamqc="qualimap/star/bam",
        out_rnaseq="qualimap/star/rnaseq"
    threads:
        32
    run:
        shell("qualimap bamqc -nt {threads} -outdir {output.out_bamqc} -bam {input.bamqc_rnaseq} --feature-file {input.ge_ant}"),
        shell("qualimap rnaseq -outdir {output.out_rnaseq} -bam {input.bamqc_rnaseq} -gtf {input.g_ant}")

rule markDuplicates:
    input:
        bamfile= "alignment_sub/star/Aligned.sortedByCoord.out.bam"
    output:
        count_dir="counting_sub/",
        logs_dir ="counting_sub/logs_sub/",
        dedup_dir = "counting_sub/dedup_sub/",
        dup_dir= "counting_sub/logs_sub/star_duplicates/",
        bamod= "counting_sub/dedup_sub/star.bam"
    params:
        validation= "--VALIDATION_STRINGENCY SILENT"
    shell:
        "picard MarkDuplicates -I {input} -M {output.dup_dir}-O {output.bamod} -Xmx100g {params.validation}"
        
rule featureCounts:
    input:
        g_ant="genome/annotations.gtf",
        bamfile= "counting_sub/dedup_sub/star.bam"
    output:
        s_c= "star_counts.tsv"
    threads:
        32
    shell:
        """
        featureCounts -T {threads} \
            {input.bamfile} \
            -T {threads} \
            -p \
            --byReadGroup \
            -s 1 \
            --ignoreDup \
            -M \
            --fraction \
            -a {input.g_ant} \
            -o {output.s_c} \
            --verbose
        """
rule multiqc_2:
    input:
        fastqc="fastq_qc_sub/", 
        trimmed_qc="fastq_trimmed_qc_sub/",
        alignment_qc= "alignment_sub/",
        count_qc = "counting_sub/",
        qualimap_qc = "qualimap/"
    output:
        "mutliqc_final.html"
    shell:
        "multiqc --force -d {input} -n {output}"

rule R_script:
    input:
        df="star_counts.tsv",
        Rscript = "differential_expressions.R"
    output:
        "plots/"
    shell:
        "Rscript {input.Rscript}"
