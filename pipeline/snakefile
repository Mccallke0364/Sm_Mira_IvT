# config_file: "config.yaml"
file = [a[:-9] for a in os.listdir("/data/classes/2024/fall/biol343/course_files/20240923_LH00283_0144_B22NMVKLT3/") if a.endswith("fastq.gz")]
print(file)

rule all:
    input:
        "genome/genome.fa.fai",
        "genome/annotations.gtf",
        # "trimmed/Int-02_S43_L005_R1_001.fastq.gz",
        # "trimmed/",
        "star_stats.txt"
        "multiqc_report_all_files.html"

rule fetch_ref_genome:
    output:
        "genome/genome.fa.gz"
    shell:
        "wget -O {output} https://ftp.ebi.ac.uk/pub/databases/wormbase/parasite/releases/WBPS19/species/schistosoma_mansoni/PRJEA36577/schistosoma_mansoni.PRJEA36577.WBPS19.genomic.fa.gz"

rule gzip_genome:
    input:
        "genome/genome.fa.gz"
    output:
        "genome/genome.fa"
    shell:
        "gzip -d -f {input}"

rule fetch_ref_annotations:
    output:
        "genome/annotations.gtf"
    shell:
        "wget -O - https://ftp.ebi.ac.uk/pub/databases/wormbase/parasite/releases/WBPS19/species/schistosoma_mansoni/PRJEA36577/schistosoma_mansoni.PRJEA36577.WBPS19.canonical_geneset.gtf.gz | gzip -f -d > {output}"

rule create_fai:
    input:
        "genome/genome.fa"
    output:
        "genome/genome.fa.fai"
    shell:
        "samtools faidx {input}"

rule cutadapt:
    input:
        # "/data/classes/2024/fall/biol343/course_files/20240923_LH00283_0144_B22NMVKLT3/Int-02_S43_L005_R2_001.fastq.gz"
        i_1="/data/classes/2024/fall/biol343/course_files/20240923_LH00283_0144_B22NMVKLT3/{sample}_R1_001.fastq.gz",
        i_2="/data/classes/2024/fall/biol343/course_files/20240923_LH00283_0144_B22NMVKLT3/{sample}_R2_001.fastq.gz"

    output:
        # file_out="trimmed/Int-02_S43_L005_R2_001.fastq.gz",
        o_1="trimmed/{sample}_R1_001_trimmed.fastq.gz",
        o_2="trimmed/{sample}_R2_001_trimmed.fastq.gz"

    shell:
        "cutadapt -a AGATCGGAAGAGCACACGTCTGAACTCCAGTCA -A AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT -o {output.o_1} -p {output.o_2} {input.i_1} {input.i_2}"

# rule create_config_file:
#     input:
#         ina=
#     # output:
#     params:
     
#     run:

   
# rule multi_qc_report_copy:
#     input:
#         "/data/classes/2024/fall/biol343/course_files/20240923_LH00283_0144_B22NMVKLT3/multiqc_report.html"
#     output:
#         directory("qc_snake/"),
#         out="qc_snake/multiqc_report.html"
#     shell:
#         "cp {input} {output.out}"

rule qc:
    input:
        "/data/classes/2024/fall/biol343/course_files/20240923_LH00283_0144_B22NMVKLT3/{sample}.fastq.gz"
    output:
        "qc_snake/{sample}_fastqc.html",
        "qc_snake/{sample}_fastqc.zip"
    params:
        out="qc_snake/"
    shell:
        "fastqc -t 16 {input} -o {params.out}"

rule qc_2:
    input:
        "trimmed/{sample}.fastq.gz"
    output:
        multiext("qc_snake/{sample}_fastqc", ".html", ".zip")
        # "qc_snake/{sample}_fastqc.html",
        # "qc_snake/{sample}_fastqc.zip"
    params:
        qc_2_out="qc_snake/"
    shell:
        "fastqc -t 16 {input} -o {params.qc_2_out}"
# config_file: rules.create_config_file.output.file
rule multiqc:
    input:
        i=expand("qc_snake/{sample}_trimmed_fastqc.html", sample=file),#[line for line in rules.create_config_file.output])
        i_2=expand("qc_snake/{sample}_fastqc.html", sample=file)
    output:
        "multiqc_report_all_files.html"
    params:
        dir=rules.qc.params.out
    shell:
        "multiqc -f -d {params.dir} -n {output}"
rule star:
    input:

    output:
        genomeDir=directory("genome_sub/star")
    ="genome/genome.fa"
    ="genome/annotations.gtf"
    params:
        overhang=150
        bpc=13
        runMode="genomeGenerate"
        runMode_align="alignReads"
    threads:
        32
    run:
        """
        STAR \
            --runThreadN {threads} \
            --runMode {params.runMode} \
            --genomeDir {output.genomeDir} \
            --genomeFastaFiles  \
            --sjdbGTFfile {output.sjdbGTFfile} \
            --sjdbOverhang {params.overhang}\
            --genomeSAindexNbases {params.bpc}
        """
rule alignment:
    input:
        gene_dir="genome_sub/star"
    output:
        manifest_file = "manifest.tsv",
        out_align = "alignment/star/",
        log_file_1 = "alignment/star/firstlog.final.out",
        log_file_2 = "alignment/star/second.final.out",
        sjdbFileChrStartEnd = "alignment/star/SJ.out.tab"
    threads:
        32
    run:

        """STAR \
            --runThreadN {threads} \
            --runMode {params.runMode_align}\
            --genomeDir alignment/star \
            --readFilesManifest {manifest_file}\
            --readFilesCommand zcat \
            --outSAMtype BAM SortedByCoordinate \
            --outSAMunmapped Within \
            --outFileNamePrefix {output.out_align}\
            cp alignment/star/Log.final.out {output.log_file_1}
        """,
        """ 
        STAR \
            --runThreadN {threads) \
            --runMode {params.runMode_align} \
            --genomeDir {input.gene_dir} \
            --readFilesManifest {manifest_file} \
            --readFilesCommand zcat \
            --outSAMtype BAM SortedByCoordinate \
            --outSAMunmapped Within \
            --outSAMattributes NH HI AS nM RG \
            --outFileNamePrefix {output.out_align} \
            --sjdbFileChrStartEnd {sjdbFileChrStartEnd}
            cp alignment/star/Log.final.out {output.log_file_2}
        """
rule samtools:
    input:
        "alignment/",
        file_bam= "alignment/star/Aligned.sortedByCoord.out.bam"
    output:
        "star_stats.txt"
    threads:
        32 
    run:
        shell("samtools flagstat {input} > {output}"),
        shell("samtools index -@ {threads} {input.file_bam}"),
        shell("samtools stats -@ {threads} {input.file_bam} > {output}")

rule qualimap:
    input:
        bamqc_rnaseq="alignment/star/Aligned.sortedByCoord.out.bam"
        genome_annotate="genome/annotations.gtf"
    output:
        out_bamqc="qualimap/star/bam"
        out_rnaseq="qualimap/star/rnaseq"
    run:
        shell("qualimap bamqc -nt 32 -outdir {output.out_bamqc} -bam {input.bamqc_rnaseq} --feature-file {input.genome_annotate}"),
        shell("qualimap rnaseq -outdir {output.out_rnaseq} -bam {input.bamqc_rnaseq} -gtf {input.genome_annotate}")
